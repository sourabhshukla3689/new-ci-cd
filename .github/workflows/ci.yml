name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-commit checks
  pre-commit-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Make mvnw executable
        run: chmod +x ./mvnw
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
          
      - name: Simple secret check
        run: |
          echo "🔍 Running basic secret scan..."
          if grep -r -i -E "(password|secret|key|token|credential)" --include="*.java" --include="*.properties" --include="*.yml" --include="*.yaml" src/ || true; then
            echo "⚠️ Potential secrets found in source files. Please review."
          else
            echo "✅ No obvious secrets detected in source files."
          fi

  # Build and Test
  build-and-test:
    needs: pre-commit-checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Make mvnw executable
        run: chmod +x ./mvnw
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
          
      - name: Run tests with coverage
        run: |
          ./mvnw clean test jacoco:report
          echo "📊 Coverage report generated at target/site/jacoco/"
        
      - name: Build application
        run: ./mvnw clean package -DskipTests
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: target/*.jar
          
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: target/site/jacoco/

  # Code Quality Analysis - SonarQube Integration (Currently Disabled)
  code-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Make mvnw executable
        run: chmod +x ./mvnw
          
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: |
            ${{ runner.os }}-sonar
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      # ========================================
      # SONARQUBE ANALYSIS - CURRENTLY DISABLED
      # ========================================
      # Uncomment the following section when SonarQube is configured:
      # 
      # 1. Add SONAR_TOKEN to GitHub repository secrets
      # 2. Add SONAR_HOST_URL to GitHub repository secrets (if using SonarQube server)
      # 3. Configure sonar-project.properties in project root or add Maven SonarQube plugin
      # 
      # - name: Run SonarQube analysis
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   run: |
      #     echo "🔍 Running SonarQube analysis..."
      #     ./mvnw clean verify sonar:sonar \
      #       -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }} \
      #       -Dsonar.organization=${{ github.repository_owner }} \
      #       -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
      #       -Dsonar.login=${{ env.SONAR_TOKEN }} \
      #       -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      #     echo "✅ SonarQube analysis completed"
      #
      # Alternative for SonarCloud:
      # - name: Run SonarCloud analysis
      #   uses: SonarSource/sonarcloud-github-action@master
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   with:
      #     args: >
      #       -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
      #       -Dsonar.organization=${{ github.repository_owner }}
      #       -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
      
      # PLACEHOLDER: SonarQube analysis step
      - name: Code Quality Analysis Placeholder
        run: |
          echo "🔍 Code Quality Analysis Step"
          echo "📋 SonarQube analysis is currently disabled"
          echo "📝 To enable SonarQube:"
          echo "   1. Configure SONAR_TOKEN secret in repository settings"
          echo "   2. Configure SONAR_HOST_URL secret (if using SonarQube server)"
          echo "   3. Uncomment the SonarQube analysis section above"
          echo "   4. Ensure sonar-project.properties exists or Maven plugin is configured"
          echo "✅ Code analysis placeholder completed"

  # SAST Security Scanning with Snyk
  sast-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        
      - name: Make mvnw executable
        run: chmod +x ./mvnw
        
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2
        
      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          
      - name: Run Snyk security test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          echo "🔍 Running Snyk security analysis..."
          if [ -n "$SNYK_TOKEN" ]; then
            snyk auth $SNYK_TOKEN
            snyk test --severity-threshold=high --all-projects || echo "⚠️ Snyk found security issues"
          else
            echo "⚠️ SNYK_TOKEN not configured, skipping security scan"
          fi
          echo "✅ Security analysis completed"

  # SCA Security Scanning with OWASP
  sca-scan:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
        
      - name: Make mvnw executable
        run: chmod +x ./mvnw
        
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: 'demo'
          path: '.'
          format: 'ALL'
          
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # Build and Push Docker Image
  build-docker:
    needs: [build-and-test, code-analysis, sast-scan, sca-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jar-artifact
          path: target/
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
          
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
      - name: Output image
        id: image
        run: echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT

  # Container Security Scanning
  container-scan:
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    steps:
      - name: Container scan placeholder
        run: |
          echo "🔍 Container security scanning step"
          echo "📦 Image: ${{ needs.build-docker.outputs.image }}"
          echo "ℹ️ Container scanning completed"
          echo "✅ Container scan step completed"